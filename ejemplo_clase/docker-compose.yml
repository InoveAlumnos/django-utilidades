version: "3.3"
# Este es un archivo de docker-compose.yml para configurar el uso de contenedores de software.

services:
  db:
    # Este servicio crea una base de datos de tipo Postgres.
    image: postgres:13.2
    volumes:
      # Aquí se enlaza el contenido de dentro del contenedor con el directorio en nuestra PC
      # de esa manera lo que guardemos en la base de datos va a quedar accesible en nuestra carpeta.
      - ./database:/var/lib/postgresql/data
    environment:
      # Postgres nos exige que establezcamos un usuario por defecto, esto se hace por medio
      # de variables de entorno. Según el hub de Postgres:
      POSTGRES_DB: marvel_db
      POSTGRES_USER: inove_user
      POSTGRES_PASSWORD: 123Marvel!

    ports:
      # Enlazamos el puerto en el que trabaja Postgres, por defecto el 5432
      - 5432:5432

  adminer:
    # Una interfaz para monitoreo y gestión de nuestra base de datos.
    # Se puede acceder a ella en localhost:8080
    image: adminer:4.8.0
    ports:
      - 8080:8080
    # Variables de entorno
    environment:
      DB_ENGINE: POSTGRES
    # depends_on indica que este servicio depende de que primero inicie "db"
    depends_on: ["db"]

  modulo_7:
    # build es el lugar desde donde toma los archivos para generar la imagen.
    # Toma como contexto de trabajo el directorio donde está el docker-compose.yml (.)
    # y busca el archivo "dockerfile".
    build:
      context: .
      dockerfile: dockerfile
    # Imágen a utilizar:
    image: modulo_7
    # Nombre del container:
    container_name: modulo_7
    # Carpetas enlazadas:
    volumes:
      # Source code directory:
      - type: bind
        source: .
        target: /opt/back_end
      # Con esto bindeamos internamente la carpeta "envs" pero sin su contenido.
      - /opt/back_end/envs
    # Cargo todas las variables de entorno contenidas en los archivos .env
    env_file:
      - ./envs/email.env
    # Puertos enlazados:
    ports:
        - "8000:8000"
    # Control de consola:
    stdin_open: true
    tty: true
    command: bash -c "[-d marvel/logs] || mkdir marvel/logs ; python manage.py runserver 0.0.0.0:8000"
    depends_on:
      - db
# +++++++++++++++++++ Configuración para tareas asincrónicas +++++++++++++++++++ #

  # Base de datos tipo Key-Value redis:     
  redis:
    image: "redis:alpine"
    container_name: redis
    depends_on:
      - db

  # Celery-worker para ejecutar las tareas (funciones) que definimos en nuestro código:
  celery:
    build: .
    command: bash -c "celery --app marvel worker -l info"
    container_name: celery
    volumes:
      - type: bind
        source: .
        target: /opt/back_end
    depends_on:
      - redis
      - db
      - modulo_7

  # Celery-beat para organizar las tareas periódicas que definamos en nuestro código.
  celery-beat:
    build: .
    container_name: celery_beat
    command: bash -c "celery --app marvel beat -l info"
    volumes:
      - type: bind
        source: .
        target: /opt/back_end
    depends_on:
      - redis
      - db
      - modulo_7

  # flower para monitorear las celery task que definamos en nuestro código.
  celery-flower:
    container_name: celery_flower
    build: .
    image: local-saccess-django
    command: bash -c "celery --app marvel flower"
    volumes:
      - type: bind
        source: .
        target: /opt/back_end
    ports:
      - 5555:5555
    depends_on:
      - redis
      - db
      - modulo_7
      - celery
      - celery-beat